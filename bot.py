#7885233281:AAFOUDvwhCa1Fx6m415JqBnh61ls_CO-Xe0
import telebot
import json
import os
import time
import random
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot import types
from shop_data import WEAPON_SHOP, ARMOR_SHOP, POTION_SHOP



TOKEN = '7885233281:AAFOUDvwhCa1Fx6m415JqBnh61ls_CO-Xe0'
bot = telebot.TeleBot(TOKEN)

WORK_COOLDOWN = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

selected_item_for_use = {}


################# BUSSINESS ################

BUSINESS_LIST = [
    {"id": 1, "name": "ü•¶ –û–≤–æ—â–Ω–∞—è –ª–∞–≤–∫–∞", "price": 500, "income": 50},
    {"id": 2, "name": "üõ° –ú–∞–≥–∞–∑–∏–Ω –±—Ä–æ–Ω–∏", "price": 1000, "income": 120},
    {"id": 3, "name": "üß™ –ê–ø—Ç–µ–∫–∞", "price": 1500, "income": 180},
]

BUSINESS_COOLDOWN = 300  # 5 –º–∏–Ω—É—Ç



################  SHOP ################
SHOP_ITEMS = [
    {"name": "üçé –Ø–±–ª–æ–∫–æ", "price": 20, "effect": "heal", "value": 10},
    {"name": "ü•™ –ë—É—Ç–µ—Ä–±—Ä–æ–¥", "price": 50, "effect": "heal", "value": 25},
    {"name": "üß™ –ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è", "price": 100, "effect": "heal", "value": 50}
]

################ LOCATION ################
LOCATIONS = [
    "üå≥ –î–µ—Ä–µ–≤–Ω—è",
    "üèô –ì–æ—Ä–æ–¥",
    "üèî –ì–æ—Ä—ã",
    "üåã –í—É–ª–∫–∞–Ω"
]
################ MONSTERS #############
MONSTERS = [
    {"name": "üêÄ –ì–∏–≥–∞–Ω—Å–∫–∞—è –ö—Ä—ã—Å–∞", "hp": 20, "damage": 5, "reward": 10, "xp": 5},
    {"name": "üï∑ –ü–∞—É–∫", "hp": 30, "damage": 8, "reward": 20, "xp": 10},
    {"name": "üßü –ó–æ–º–±–∏", "hp": 50, "damage": 12, "reward": 30, "xp": 20},
    {"name": "üêâ –ú–∞–ª–µ–Ω—å–∫–∏–π –î—Ä–∞–∫–æ–Ω", "hp": 100, "damage": 20, "reward": 100, "xp": 50}
]

# MISSIONS 

MISSIONS = [
    {
        "id": 1,
        "title": "‚öîÔ∏è –ü–æ–±–µ–¥–∏ 3 –º–æ–Ω—Å—Ç—Ä–æ–≤",
        "type": "kill_monsters",
        "goal": 3,
        "reward": {"coins": 100, "xp": 20}
    },
    {
        "id": 2,
        "title": "üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–π 200 –º–æ–Ω–µ—Ç",
        "type": "earn_money",
        "goal": 200,
        "reward": {"coins": 50, "xp": 10}
    },
    {
        "id": 3,
        "title": "üõ† –í—ã–ø–æ–ª–Ω–∏ 5 —Ä–∞–±–æ—Ç",
        "type": "do_work",
        "goal": 5,
        "reward": {"coins": 80, "xp": 15}
    }
]

# –î–û–°–¢–ò–ñ–ï–ù–ò–ï

ACHIEVEMENTS = [
    {
        "id": 1,
        "title": "üó° –ü–µ—Ä–≤—ã–π –±–æ–π",
        "type": "kill_monsters",
        "goal": 1,
        "reward": {"coins": 20, "xp": 5}
    },
    {
        "id": 2,
        "title": "üí∞ –ë–æ–≥–∞—á",
        "type": "earn_money_total",
        "goal": 1100,
        "reward": {"coins": 50, "xp": 10}
    },
    {
        "id": 3,
        "title": "üéØ –†–∞–±–æ—Ç—è–≥–∞",
        "type": "do_work_total",
        "goal": 10,
        "reward": {"coins": 30, "xp": 8}
    }
]




@bot.message_handler(func=lambda message: message.text == "üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
def select_item_to_use(message):
    users = load_users()
    user_id = str(message.from_user.id)
    user = users.get(user_id)

    if not user or not user.get("inventory"):
        bot.send_message(message.chat.id, "üéí –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for item_name in user["inventory"].keys():
        markup.add(item_name)
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
    selected_item_for_use[user_id] = True  # –ü–æ–º–µ—Ç–∏–º, —á—Ç–æ –æ–Ω –≤ —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

@bot.message_handler(func=lambda message: str(message.from_user.id) in selected_item_for_use)
def handle_inventory_use(message):
    user_id = str(message.from_user.id)
    if user_id not in selected_item_for_use:
        return  # –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    item_name = message.text
    users = load_users()
    user = users.get(user_id)

    if item_name not in user["inventory"]:
        bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.")
        return

    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∑–µ–ª–∏–π
    from shop_data import POTION_SHOP
    potion = next((p for p in POTION_SHOP if p["name"] == item_name), None)
    if not potion:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.")
        return

    effect = potion["effect"]
    if "hp" in effect:
        user["hp"] = min(100, user["hp"] + effect["hp"])
        bot.send_message(message.chat.id, f"üß™ –¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {item_name} –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª {effect['hp']} HP.")
    elif "armor_boost" in effect:
        if "effects" not in user:
            user["effects"] = {}
        user["effects"]["armor_boost"] = {
            "value": effect["armor_boost"],
            "turns": effect["duration"]
        }
        bot.send_message(
            message.chat.id,
            f"üõ° –¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {item_name}.\n–¢–≤–æ—è –±—Ä–æ–Ω—è —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {effect['armor_boost']} –Ω–∞ {effect['duration']} –±–æ—ë–≤!"
        )
    else:
        bot.send_message(message.chat.id, f"‚úÖ –¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {item_name}, —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω—ë–Ω.")

    

    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    user["inventory"][item_name] -= 1
    if user["inventory"][item_name] <= 0:
        del user["inventory"][item_name]

    save_users(users)
    del selected_item_for_use[user_id]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    inventory(message)

@bot.message_handler(commands=['menu'])
def menu(message):
    send_main_menu(message.chat.id)

def send_main_actions(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üßô –ü—Ä–æ—Ñ–∏–ª—å", "‚öîÔ∏è –ë–æ–π", "üíº –†–∞–±–æ—Ç–∞")
    markup.add("üéØ –ú–∏—Å—Å–∏—è", "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", "üõç –ú–∞–≥–∞–∑–∏–Ω")
    markup.add("üéÅ –ë–æ–Ω—É—Å –¥–Ω—è")
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(chat_id, "üì¶ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=markup)

def send_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üì¶ –û—Å–Ω–æ–≤–Ω—ã–µ", "üß∞ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ")
    bot.send_message(chat_id, "üîò –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

def send_support_actions(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìú –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å", "üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "üë• –ö–ª–∞–Ω")
    markup.add("ü§ù –î—Ä—É–∑—å—è", "üí∏ –ü–µ—Ä–µ–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã")
    markup.add("‚öîÔ∏è –ú–∞–≥–∞–∑–∏–Ω —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è")
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(chat_id, "üß∞ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:", reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    text = message.text

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text == "üì¶ –û—Å–Ω–æ–≤–Ω—ã–µ":
        send_main_actions(message.chat.id)
    elif text == "üß∞ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ":
        send_support_actions(message.chat.id)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        send_main_menu(message.chat.id)

    # –û—Å–Ω–æ–≤–Ω—ã–µ
    elif text == "üßô –ü—Ä–æ—Ñ–∏–ª—å":
        profile(message)
    elif text == "‚öîÔ∏è –ë–æ–π":
        fight(message)
    elif text == "‚öîÔ∏è –ú–∞–≥–∞–∑–∏–Ω —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è":
        open_equipment_shop(message)
    elif text == "üó° –û—Ä—É–∂–∏–µ":
        show_weapon_shop(message)
    elif text == "üõ° –ë—Ä–æ–Ω—è":
        show_armor_shop(message)
    elif text == "üç∑ –ó–µ–ª—å—è":
        show_potions(message)
    elif text == "üíº –†–∞–±–æ—Ç–∞":
        work(message)
    elif text == "üéÅ –ë–æ–Ω—É—Å –¥–Ω—è":
        daily_bonus(message)
    elif text == "üéØ –ú–∏—Å—Å–∏—è":
        mission(message)
    elif text == "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å":
        inventory(message)
    elif text == "üõç –ú–∞–≥–∞–∑–∏–Ω":
        open_shop_menu(message)
    elif text in [item["name"] for item in WEAPON_SHOP]:
        buy_equipment(message, text, "weapon")
    elif text in [item["name"] for item in ARMOR_SHOP]:
        buy_equipment(message, text, "armor")
    elif text in [p["name"] for p in POTION_SHOP]:
        buy_potion(message, text)

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
    elif text == "üìú –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å":
        help(message)
    elif text == "üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è":
        show_achievements(message)
    elif text == "üë• –ö–ª–∞–Ω":
        clan_info(message)
    elif text == "ü§ù –î—Ä—É–∑—å—è":
        show_friends(message)
    elif text == "üí∏ –ü–µ—Ä–µ–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã":
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /pay ID —Å—É–º–º–∞")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
    elif text in [item["name"] for item in SHOP_ITEMS]:
        buy_named_item(message, text)

def buy_equipment(message, item_name, category):
    users = load_users()
    user_id = str(message.from_user.id)

    shop_list = WEAPON_SHOP if category == "weapon" else ARMOR_SHOP
    item = next((i for i in shop_list if i["name"] == item_name), None)

    if not item:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user = users.get(user_id)
    if not user:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    if "equipment" not in user:
        user["equipment"] = {"armor": None, "weapon": None}

    if user["coins"] < item["price"]:
        bot.send_message(message.chat.id, "üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
        return

    user["coins"] -= item["price"]
    user["equipment"][category] = item_name

    save_users(users)
    bot.send_message(message.chat.id, f"‚úÖ –¢—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∞–ª {item_name}!")


def fight(message):
    users = load_users()
    user_id = str(message.from_user.id)
    user = users.get(user_id)

    if not user:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    monster_hp = 50
    monster_damage = 20

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –±—Ä–æ–Ω–∏
    defense = 0
    equipped_armor = user.get("equipment", {}).get("armor")
    for armor in ARMOR_SHOP:
        if armor["name"] == equipped_armor:
            defense = armor.get("defense", 0)

    user_hp = user["hp"]

    while monster_hp > 0 and user_hp > 0:
        monster_hp -= 15  # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
        if monster_hp > 0:
            user_hp -= max(0, monster_damage - defense)  # –ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç

    result = ""
    if user_hp > 0:
        user["hp"] = user_hp
        user["coins"] += 50
        user["stats"]["kills"] += 1
        result = "üèÜ –¢—ã –ø–æ–±–µ–¥–∏–ª –º–æ–Ω—Å—Ç—Ä–∞ –∏ –ø–æ–ª—É—á–∏–ª 50 –º–æ–Ω–µ—Ç!"
    else:
        user["hp"] = 0
        result = "üíÄ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –º–æ–Ω—Å—Ç—Ä—É!"

    save_users(users)
    bot.send_message(message.chat.id, result)


def buy_named_item(message, item_name):
    users = load_users()
    user_id = str(message.from_user.id)

    item = next((i for i in SHOP_ITEMS if i["name"] == item_name), None)
    if not item:
        bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user = users.get(user_id)
    if not user:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    if user["coins"] < item["price"]:
        bot.send_message(message.chat.id, "üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
        return

    user["coins"] -= item["price"]
    user["hp"] = min(100, user["hp"] + item["value"])
    save_users(users)

    bot.send_message(message.chat.id, f"‚úÖ –¢—ã –∫—É–ø–∏–ª {item['name']} –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª {item['value']} HP.")


def check_achievements(user, message):
    for a in ACHIEVEMENTS:
        if a["id"] in user["achievements"]:
            continue

        if a["type"] == "kill_monsters" and user["stats"]["kills"] >= a["goal"]:
            unlock_achievement(user, message, a)
        elif a["type"] == "earn_money_total" and user["stats"]["money_earned"] >= a["goal"]:
            unlock_achievement(user, message, a)
        elif a["type"] == "do_work_total" and user["stats"]["work_done"] >= a["goal"]:
            unlock_achievement(user, message, a)

def unlock_achievement(user, message, achievement):
    user["achievements"].append(achievement["id"])
    user["coins"] += achievement["reward"]["coins"]
    user["xp"] += achievement["reward"]["xp"]
    bot.send_message(
        message.chat.id,
        f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: <b>{achievement['title']}</b>!\n"
        f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {achievement['reward']['coins']} –º–æ–Ω–µ—Ç, {achievement['reward']['xp']} XP",
        parse_mode="HTML"
    )

def deposit_ready(bank_data):
    if bank_data["amount"] == 0 or bank_data["timestamp"] == 0:
        return False
    return (time.time() - bank_data["timestamp"]) >= 3 * 60 * 60  # 3 —á–∞—Å–∞

def load_clans():
    try:
        with open("clans.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_clans(data):
    with open("clans.json", "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
if not os.path.exists("users.json"):
    with open("users.json", "w") as f:
        json.dump({}, f)

def load_users():
    with open("users.json", "r") as f:
        return json.load(f)

def save_users(data):
    with open("users.json", "w") as f:
        json.dump(data, f, indent=4)

def show_potions(message):
    from shop_data import POTION_SHOP
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for potion in POTION_SHOP:
        markup.add(potion["name"])
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "üç∑ –ó–µ–ª—å—è –≤ –ø—Ä–æ–¥–∞–∂–µ:", reply_markup=markup)

def buy_potion(message, potion_name):
    from shop_data import POTION_SHOP
    users = load_users()
    user_id = str(message.from_user.id)
    user = users.get(user_id)

    potion = next((p for p in POTION_SHOP if p["name"] == potion_name), None)
    if not potion:
        bot.send_message(message.chat.id, "‚ùå –ó–µ–ª—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    if user["coins"] < potion["price"]:
        bot.send_message(message.chat.id, "üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
        return

    user["coins"] -= potion["price"]
    user["inventory"][potion_name] = user["inventory"].get(potion_name, 0) + 1
    save_users(users)
    bot.send_message(message.chat.id, f"‚úÖ –¢—ã –∫—É–ø–∏–ª {potion_name}. –û–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.")

def open_equipment_shop(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üó° –û—Ä—É–∂–∏–µ", "üõ° –ë—Ä–æ–Ω—è")
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "‚öîÔ∏è –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è:", reply_markup=markup)

def open_shop_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üó° –û—Ä—É–∂–∏–µ", "üõ° –ë—Ä–æ–Ω—è", "üç∑ –ó–µ–ª—å—è")
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

def show_weapon_shop(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for item in WEAPON_SHOP:
        markup.add(item["name"])
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "üî™ –í—ã–±–µ—Ä–∏ –æ—Ä—É–∂–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=markup)

def show_armor_shop(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for item in ARMOR_SHOP:
        markup.add(item["name"])
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "üõ° –í—ã–±–µ—Ä–∏ –±—Ä–æ–Ω—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üõ° –ë—Ä–æ–Ω—è")
def show_armors(message):
    from shop_data import ARMORS
    text = "üõ° –î–æ—Å—Ç—É–ø–Ω–∞—è –±—Ä–æ–Ω—è:\n"
    for a in ARMORS:
        text += f"{a['name']} ‚Äî {a['price']} –º–æ–Ω–µ—Ç, –ó–∞—â–∏—Ç–∞: {a['defense']}\n"
    bot.send_message(message.chat.id, text)



@bot.message_handler(commands=['start'])
def start(message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        users[user_id] = {
            "name": message.from_user.first_name,
            "level": 1,
            "xp": 0,
            "coins": 100,
            "hp": 100,
            "location": "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–µ—Ä–µ–≤–Ω—è",
            "inventory": {},
            "bank": {
                "amount": 0,
                "clan_id": [],
                "timestamp": 0
            },
            "achievements": [],
            "stats": {
                "kills": 0,
                "work_done": 0,
                "money_earned": 0
            },
            "friends": [],
            "pending_friends": [],
            "last_daily_bonus": 0,
            "equipment": {
                "armor": None,
                "weapon": None
            },
            "effects": {},
        }
        save_users(users)
        send_main_menu(message.chat.id)  # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –¢—ã –Ω–∞—á–∞–ª —Å–≤–æ—ë –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ! üó∫Ô∏è\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ /help")
    else:
        bot.send_message(message.chat.id, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∏–≥—Ä–µ!")

@bot.message_handler(commands=['profile'])
def profile(message):
    users = load_users()
    user_id = str(message.from_user.id)
    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return
    user = users[user_id]
    ach_done = len(user.get("achievements", []))

    user = users[user_id]
    text = (
        f"üßô –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ {user['name']}\n"
        f"üèÖ –£—Ä–æ–≤–µ–Ω—å: {user['level']}\n"
        f"üí• –û–ø—ã—Ç: {user['xp']}\n"
        f"üí∞ –ú–æ–Ω–µ—Ç—ã: {user['coins']}\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {user['hp']}\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {user['location']}\n"
        f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {ach_done}/{len(ACHIEVEMENTS)}\n"
        f"üõ° –ë—Ä–æ–Ω—è: {user['equipment'].get('armor', '–ù–µ—Ç')}\n"
        f"‚öîÔ∏è –û—Ä—É–∂–∏–µ: {user['equipment'].get('weapon', '–ù–µ—Ç')}\n"
        
    )
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['help'])
def help(message):
    text = (
        "üìñ *–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –ø–æ –∏–≥—Ä–µ*\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RPG –º–∏—Ä! –í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å:\n\n"
        "üßç‚Äç‚ôÇÔ∏è /profile ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "üèó /work ‚Äì —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã\n"
        "üõí /shop ‚Äì –º–∞–≥–∞–∑–∏–Ω —Å —Ç–æ–≤–∞—Ä–∞–º–∏\n"
        "‚öîÔ∏è /fight ‚Äì —Å—Ä–∞–∑–∏—Ç—å—Å—è —Å –º–æ–Ω—Å—Ç—Ä–æ–º\n"
        "üéí /inventory ‚Äì —Ç–≤–æ–π —Ä—é–∫–∑–∞–∫\n"
        "üß≠ /travel ‚Äì –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–∏–µ –ª–æ–∫–∞—Ü–∏–∏\n"
        "üë• /mission ‚Äì –ö–≤–µ—Å—Ç—ã\n"
        "üë• /buy ‚Äì –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "üë• /deposit ‚Äì –ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç\n"
        "üë• /withdraw ‚Äì —Å–Ω—è—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–µ–Ω—å–≥–∏ —Å –¥–µ–ø–æ–∑–∏—Ç–∞\n"
        "üë• /bank ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞\n"
        "üë• /buy ‚Äì –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "üë• /achievements ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è \n"
        "üë• /go ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å\n"
        "üë• /use ‚Äì –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Å –∏–Ω–≤–µ–Ω—Ç–æ—Ä—è\n"
        "üìà /top ‚Äì —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é\n"
        "üìò /help ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n\n"
        "üéØ –¶–µ–ª—å –∏–≥—Ä—ã ‚Äì –ø—Ä–æ–∫–∞—á–∞—Ç—å—Å—è, –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –ø–æ–±–µ–¥–∏—Ç—å –±–æ—Å—Å–æ–≤!\n"
        "–£–¥–∞—á–∏, –≥–µ—Ä–æ–π! üèÜ"
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown")


@bot.message_handler(commands=['work'])
def work(message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return

    user = users[user_id]
    now = int(time.time())

    last_work = user.get("last_work", 0)
    if now - last_work < WORK_COOLDOWN:
        remaining = WORK_COOLDOWN - (now - last_work)
        minutes = remaining // 60
        seconds = remaining % 60
        bot.send_message(message.chat.id, f"‚è≥ –¢—ã —É—Å—Ç–∞–ª. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω {seconds} —Å–µ–∫.")
        return

    # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    earned_coins = 50
    earned_xp = 10
    user["coins"] += earned_coins
    user["xp"] += earned_xp
    user["last_work"] = now

    # –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    level_up(user)

    save_users(users)
    bot.send_message(
        message.chat.id,
        f"üíº –¢—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª:\nüí∞ {earned_coins} –º–æ–Ω–µ—Ç\n‚ú® {earned_xp} –æ–ø—ã—Ç–∞"
    )

def level_up(user):
    xp = user["xp"]
    level = user["level"]
    next_level_xp = level * 100

    if xp >= next_level_xp:
        user["level"] += 1
        user["xp"] = xp - next_level_xp

# SHOP 

@bot.message_handler(commands=['shop'])
def shop(message):
    text = "<b>üõí –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤:</b>\n\n"
    for idx, item in enumerate(SHOP_ITEMS, start=1):
        text += f"{idx}. {item['name']} ‚Äî {item['price']} –º–æ–Ω–µ—Ç\n"
    text += "\n–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å, –Ω–∞–ø–∏—à–∏: /buy –ù–æ–º–µ—Ä_–ø—Ä–µ–¥–º–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /buy 1)"
    bot.send_message(message.chat.id, text, parse_mode="HTML")

@bot.message_handler(commands=['buy'])
def buy(message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏ /start.")
        return

    args = message.text.split(' ', 1)
    if len(args) < 2 or not args[1].isdigit():
        bot.send_message(message.chat.id, "–ü–∏—à–∏: /buy –ù–æ–º–µ—Ä_–ø—Ä–µ–¥–º–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /buy 1)")
        return

    item_index = int(args[1]) - 1  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 0

    if not (0 <= item_index < len(SHOP_ITEMS)):
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        return

    item = SHOP_ITEMS[item_index]
    user = users[user_id]

    if user["coins"] < item["price"]:
        bot.send_message(message.chat.id, "üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
        return

    user["coins"] -= item["price"]
    user["hp"] = min(user["hp"] + item["value"], 100)

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    inventory = user.setdefault("inventory", {})  # —Å–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
    item_name = item["name"]
    inventory[item_name] = inventory.get(item_name, 0) + 1

    save_users(users)
    bot.send_message(
        message.chat.id,
        f"‚úÖ –¢—ã –∫—É–ø–∏–ª {item['name']} –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª {item['value']} HP!"
    )


# TRAVEL

@bot.message_handler(commands=['travel'])
def travel(message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    text = "<b>üß≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏:</b>\n\n"
    for idx, location in enumerate(LOCATIONS, start=1):
        text += f"{idx}. {location}\n"
    text += "\n–ß—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏: /go –ù–æ–º–µ—Ä_–ª–æ–∫–∞—Ü–∏–∏"

    bot.send_message(message.chat.id, text, parse_mode="HTML")

@bot.message_handler(commands=['go'])
def go(message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    args = message.text.split(' ', 1)
    if len(args) < 2 or not args[1].isdigit():
        bot.send_message(message.chat.id, "–ü–∏—à–∏: /go –ù–æ–º–µ—Ä_–ª–æ–∫–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /go 2)")
        return

    loc_index = int(args[1]) - 1
    if not (0 <= loc_index < len(LOCATIONS)):
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –ª–æ–∫–∞—Ü–∏–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        return

    users[user_id]["location"] = LOCATIONS[loc_index]
    save_users(users)

    bot.send_message(message.chat.id, f"‚úÖ –¢—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ {LOCATIONS[loc_index]}")

#### INVENTORY 

@bot.message_handler(commands=['inventory'])
def inventory(message):
    users = load_users()
    user_id = str(message.from_user.id)
    user = users.get(user_id)

    if not user or not user.get("inventory"):
        bot.send_message(message.chat.id, "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for item_name, count in user["inventory"].items():
        markup.add(f"{item_name} x{count}")
    markup.add("üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:", reply_markup=markup)

@bot.message_handler(commands=['use'])
def use_item(message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏ /start.")
        return

    user = users[user_id]
    inventory = user.get("inventory", {})

    args = message.text.split(' ', 1)
    if len(args) < 2 or not args[1].isdigit():
        bot.send_message(message.chat.id, "–ü–∏—à–∏: /use –ù–æ–º–µ—Ä_–ø—Ä–µ–¥–º–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /use 1)")
        return

    item_index = int(args[1]) - 1
    inventory_list = list(inventory.items())

    if not (0 <= item_index < len(inventory_list)):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞.")
        return

    item_name, count = inventory_list[item_index]

    # –ù–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ SHOP_ITEMS –ø–æ –∏–º–µ–Ω–∏
    item_data = next((item for item in SHOP_ITEMS if item["name"] == item_name), None)
    if not item_data:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
    if item_data["effect"] == "heal":
        heal = item_data["value"]
        user["hp"] = min(user["hp"] + heal, 100)
        bot.send_message(message.chat.id, f"üß™ –¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {item_name} –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª {heal} HP!")
    else:
        bot.send_message(message.chat.id, f"–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {item_name}, –Ω–æ –ø–æ–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")

    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if count > 1:
        inventory[item_name] -= 1
    else:
        del inventory[item_name]

    save_users(users)

#### FIGHT 

@bot.message_handler(commands=['fight'])
def fight(message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    user = users[user_id]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏—Å—Å–∏—é
    mission = None
    if user.get("mission") and user["mission"].get("id") is not None:
        mission = next((m for m in MISSIONS if m["id"] == user["mission"]["id"]), None)
        if mission and mission["type"] == "kill_monsters":
            user["mission"]["progress"] += 1
            if user["mission"]["progress"] >= mission["goal"]:
                user["coins"] += mission["reward"]["coins"]
                user["xp"] += mission["reward"]["xp"]
                bot.send_message(
                    message.chat.id,
                    f"‚úÖ –ú–∏—Å—Å–∏—è '{mission['title']}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\nüéÅ –ù–∞–≥—Ä–∞–¥–∞: {mission['reward']['coins']} –º–æ–Ω–µ—Ç, {mission['reward']['xp']} XP"
                )
                user["mission"] = {"id": None, "progress": 0}

    if user["hp"] <= 0:
        bot.send_message(message.chat.id, "üòµ –¢—ã —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±. –í—ã–ª–µ—á–∏—Å—å –ø–µ—Ä–µ–¥ –±–æ–µ–º.")
        return

    monster = random.choice(MONSTERS)
    monster_hp = monster["hp"]
    player_hp = user["hp"]

    while player_hp > 0 and monster_hp > 0:
        monster_hp -= 15  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–Ω –æ—Ç –∏–≥—Ä–æ–∫–∞
        if monster_hp > 0:
            player_hp -= monster["damage"]

    if player_hp > 0:
        user["coins"] += monster["reward"]
        user["xp"] += monster["xp"]
        user["hp"] = player_hp
        level_up(user)
        save_users(users)
        bot.send_message(
            message.chat.id,
            f"‚öîÔ∏è –¢—ã –ø–æ–±–µ–¥–∏–ª {monster['name']}!\n"
            f"üí∞ –ú–æ–Ω–µ—Ç—ã: +{monster['reward']}\n"
            f"‚ú® –û–ø—ã—Ç: +{monster['xp']}\n"
            f"‚ù§Ô∏è –û—Å—Ç–∞–ª–æ—Å—å HP: {player_hp}"
        )
    else:
        user["hp"] = 0
        save_users(users)
        bot.send_message(
            message.chat.id,
            f"üíÄ –¢—ã –ø–∞–ª –≤ –±–æ—é —Å {monster['name']}...\n"
            f"‚ù§Ô∏è –¢–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ —Ç–µ–ø–µ—Ä—å 0. –ò—Å–ø–æ–ª—å–∑—É–π /inventory –∏–ª–∏ /shop, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è."
        )

# DEPOSIT 


@bot.message_handler(commands=['deposit'])
def deposit(message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        bot.send_message(message.chat.id, "–ü–∏—à–∏: /deposit —Å—É–º–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /deposit 100)")
        return

    amount = int(args[1])
    user = users[user_id]

    if user["coins"] < amount or amount <= 0:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
        return

    user["coins"] -= amount
    user["bank"]["amount"] = amount
    user["bank"]["timestamp"] = time.time()

    save_users(users)
    bot.send_message(message.chat.id, f"üè¶ –¢—ã –ø–æ–ª–æ–∂–∏–ª {amount} –º–æ–Ω–µ—Ç –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç. –ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –ø–æ–ª—É—á–∏—à—å x2!")

@bot.message_handler(commands=['withdraw'])
def withdraw(message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    user = users[user_id]
    bank = user["bank"]

    if bank["amount"] == 0:
        bot.send_message(message.chat.id, "üíº –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞.")
        return

    if deposit_ready(bank):
        reward = bank["amount"] * 2
        bot.send_message(message.chat.id, f"üí∏ –¢—ã —Å–Ω—è–ª {reward} –º–æ–Ω–µ—Ç —Å –¥–µ–ø–æ–∑–∏—Ç–∞ (x2 –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ)!")
    else:
        reward = bank["amount"]
        bot.send_message(message.chat.id, f"üí∞ –¢—ã –¥–æ—Å—Ä–æ—á–Ω–æ —Å–Ω—è–ª {reward} –º–æ–Ω–µ—Ç (–±–µ–∑ –±–æ–Ω—É—Å–∞).")

    user["coins"] += reward
    user["bank"] = {"amount": 0, "timestamp": 0}
    save_users(users)

@bot.message_handler(commands=['bank'])
def bank_info(message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    user = users[user_id]

    # ‚úÖ —Å–æ–∑–¥–∞—ë–º –±–∞–Ω–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if "bank" not in user:
        user["bank"] = {"amount": 0, "timestamp": 0}
        save_users(users)

    bank = user["bank"]

    if bank["amount"] == 0:
        bot.send_message(message.chat.id, "üè¶ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∫–ª–∞–¥–∞.")
    else:
        remaining = max(0, int(3 * 60 * 60 - (time.time() - bank["timestamp"])))
        minutes = remaining // 60
        bot.send_message(
            message.chat.id,
            f"üè¶ –í –±–∞–Ω–∫–µ: {bank['amount']} –º–æ–Ω–µ—Ç.\n–î–æ x2: {minutes} –º–∏–Ω—É—Ç."
        )

################ CLAN ############

@bot.message_handler(commands=['clan_create'])
def clan_create(message):
    users = load_users()
    clans = load_clans()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    if users[user_id].get("clan_id"):
        bot.send_message(message.chat.id, "–¢—ã —É–∂–µ –≤ –∫–ª–∞–Ω–µ.")
        return

    args = message.text.split(' ', 1)
    if len(args) < 2:
        bot.send_message(message.chat.id, "–ü–∏—à–∏: /clan_create –ù–∞–∑–≤–∞–Ω–∏–µ")
        return

    name = args[1].strip()
    clan_id = user_id  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–ª–∞–Ω–∞ = ID —Å–æ–∑–¥–∞—Ç–µ–ª—è

    if clan_id in clans:
        bot.send_message(message.chat.id, "–ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º ID —É–∂–µ –µ—Å—Ç—å.")
        return

    clans[clan_id] = {
        "name": name,
        "owner": user_id,
        "members": [user_id],
        "xp": 0,
        "level": 1,
        "tasks": [],
        "chat": []
    }
    users[user_id]["clan_id"] = clan_id

    save_clans(clans)
    save_users(users)
    bot.send_message(message.chat.id, f"üè∞ –ö–ª–∞–Ω '{name}' —Å–æ–∑–¥–∞–Ω! –¢–≤–æ–π ID: {clan_id}")


@bot.message_handler(commands=['clan_join'])
def clan_join(message):
    users = load_users()
    clans = load_clans()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    if users[user_id].get("clan_id"):
        bot.send_message(message.chat.id, "–¢—ã —É–∂–µ –≤ –∫–ª–∞–Ω–µ.")
        return

    args = message.text.split(' ', 1)
    if len(args) < 2:
        bot.send_message(message.chat.id, "–ü–∏—à–∏: /clan_join ID_–∫–ª–∞–Ω–∞")
        return

    clan_id = args[1].strip()
    if clan_id not in clans:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    clans[clan_id]["members"].append(user_id)
    users[user_id]["clan_id"] = clan_id

    save_clans(clans)
    save_users(users)
    bot.send_message(message.chat.id, f"‚úÖ –¢—ã –≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª–∞–Ω {clans[clan_id]['name']}")

@bot.message_handler(commands=['clan'])
def clan_info(message):
    users = load_users()
    clans = load_clans()
    user_id = str(message.from_user.id)

    if user_id not in users or not users[user_id].get("clan_id"):
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –≤ –∫–ª–∞–Ω–µ.")
        return

    clan_id = users[user_id]["clan_id"]
    clan = clans.get(clan_id)

    if not clan:
        bot.send_message(message.chat.id, "–ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    bot.send_message(
        message.chat.id,
        f"üè∞ –ö–ª–∞–Ω: {clan['name']}\nüëë –õ–∏–¥–µ—Ä: {clan['owner']}\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(clan['members'])}"
    )


@bot.message_handler(commands=['clan_leave'])
def clan_leave(message):
    users = load_users()
    clans = load_clans()
    user_id = str(message.from_user.id)

    if user_id not in users or not users[user_id].get("clan_id"):
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –≤ –∫–ª–∞–Ω–µ.")
        return

    clan_id = users[user_id]["clan_id"]
    clan = clans.get(clan_id)

    if clan:
        clan["members"].remove(user_id)
        if user_id == clan["owner"]:
            # –£–¥–∞–ª—è–µ–º –∫–ª–∞–Ω, –µ—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –≤—ã—à–µ–ª
            del clans[clan_id]
            bot.send_message(message.chat.id, f"‚ùå –ö–ª–∞–Ω '{clan['name']}' –±—ã–ª —Ä–∞—Å–ø—É—â–µ–Ω.")
        else:
            bot.send_message(message.chat.id, "üö™ –¢—ã –ø–æ–∫–∏–Ω—É–ª –∫–ª–∞–Ω.")

    users[user_id]["clan_id"] = None
    save_clans(clans)
    save_users(users)


# MISSIONS

@bot.message_handler(commands=['mission'])
def mission(message):
    users = load_users()
    user_id = str(message.from_user.id)
    user = users.get(user_id)

    if not user:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    if "mission" not in user:
        user["mission"] = {"id": None, "progress": 0}

    if user["mission"]["id"] is not None:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –º–∏—Å—Å–∏—é
        mission = next((m for m in MISSIONS if m["id"] == user["mission"]["id"]), None)
        if mission:
            bot.send_message(
                message.chat.id,
                f"üéØ –¢–µ–∫—É—â–∞—è –º–∏—Å—Å–∏—è:\n{mission['title']}\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {user['mission']['progress']}/{mission['goal']}"
            )
        else:
            user["mission"] = {"id": None, "progress": 0}
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–∏—Å—Å–∏—é
        text = "üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏—Å—Å–∏–∏:\n"
        for m in MISSIONS:
            text += f"{m['id']}. {m['title']} (–Ω–∞–≥—Ä–∞–¥–∞: {m['reward']['coins']} –º–æ–Ω–µ—Ç, {m['reward']['xp']} XP)\n"
        text += "\n–ù–∞–ø–∏—à–∏ /take_mission [–Ω–æ–º–µ—Ä], —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –º–∏—Å—Å–∏—é."
        bot.send_message(message.chat.id, text)

    save_users(users)

@bot.message_handler(commands=['take_mission'])
def take_mission(message):
    users = load_users()
    user_id = str(message.from_user.id)
    user = users.get(user_id)

    if not user:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    if user["mission"]["id"] is not None:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –º–∏—Å—Å–∏—è. –ó–∞–≤–µ—Ä—à–∏ –µ—ë —Å–Ω–∞—á–∞–ª–∞.")
        return

    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        bot.send_message(message.chat.id, "–ü–∏—à–∏: /take_mission [–Ω–æ–º–µ—Ä –º–∏—Å—Å–∏–∏]")
        return

    mission_id = int(args[1])
    mission = next((m for m in MISSIONS if m["id"] == mission_id), None)

    if not mission:
        bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–π –º–∏—Å—Å–∏–∏ –Ω–µ—Ç.")
        return

    user["mission"] = {"id": mission_id, "progress": 0}
    save_users(users)
    bot.send_message(message.chat.id, f"üéØ –ú–∏—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞: {mission['title']}")

@bot.message_handler(commands=['achievements'])
def show_achievements(message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    user = users[user_id]
    
    # –ï—Å–ª–∏ —É —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç —ç—Ç–∏—Ö –ø–æ–ª–µ–π ‚Äî —Å–æ–∑–¥–∞—ë–º
    if "achievements" not in user:
        user["achievements"] = []
    if "stats" not in user:
        user["stats"] = {
            "kills": 0,
            "work_done": 0,
            "money_earned": 0
        }

    completed = user["achievements"]
    text = "üèÜ –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"

    for a in ACHIEVEMENTS:
        status = "‚úÖ" if a["id"] in completed else "‚ùå"
        text += f"{status} {a['title']}\n"

    bot.send_message(message.chat.id, text)

# FRIENDS 

@bot.message_handler(commands=['addfriend'])
def add_friend(message):
    users = load_users()
    user_id = str(message.from_user.id)
    args = message.text.split()

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    if len(args) != 2:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /addfriend ID_–∏–≥—Ä–æ–∫–∞")
        return

    target_id = args[1]
    if target_id == user_id:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è.")
        return

    if target_id not in users:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    users[target_id].setdefault("pending_friends", [])
    if user_id in users[target_id]["pending_friends"]:
        bot.send_message(message.chat.id, "–¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É —ç—Ç–æ–º—É –∏–≥—Ä–æ–∫—É.")
        return

    users[target_id]["pending_friends"].append(user_id)
    save_users(users)

    bot.send_message(message.chat.id, f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–≥—Ä–æ–∫—É {users[target_id]['name']} (ID: {target_id})")

    # üîò Inline –∫–Ω–æ–ø–∫–∏
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
    )

    try:
        bot.send_message(
            int(target_id),
            f"üì© –ò–≥—Ä–æ–∫ {users[user_id]['name']} (ID: {user_id}) —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–±—è –≤ –¥—Ä—É–∑—å—è.",
            reply_markup=markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

@bot.message_handler(commands=['acceptfriend'])
def accept_friend(message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    args = message.text.split()
    if len(args) != 2:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /acceptfriend ID_–∏–≥—Ä–æ–∫–∞")
        return

    requester_id = args[1]

    if requester_id not in users:
        bot.send_message(message.chat.id, "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    users[user_id].setdefault("friends", [])
    users[user_id].setdefault("pending_friends", [])
    users[requester_id].setdefault("friends", [])

    if requester_id not in users[user_id]["pending_friends"]:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞—è–≤–∫–∏ –æ—Ç —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞.")
        return

    users[user_id]["pending_friends"].remove(requester_id)
    users[user_id]["friends"].append(requester_id)
    users[requester_id]["friends"].append(user_id)
    save_users(users)

    bot.send_message(message.chat.id, f"‚úÖ –ò–≥—Ä–æ–∫ {users[requester_id]['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è.")
    try:
        bot.send_message(int(requester_id), f"üéâ {users[user_id]['name']} –ø—Ä–∏–Ω—è–ª —Ç–≤–æ—é –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

@bot.message_handler(commands=['friends'])
def show_friends(message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    friend_ids = users[user_id].get("friends", [])
    if not friend_ids:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π. –î–æ–±–∞–≤—å –∏—Ö —á–µ—Ä–µ–∑ /addfriend ID")
        return

    text = "üë• –¢–≤–æ–∏ –¥—Ä—É–∑—å—è:\n"
    for fid in friend_ids:
        name = users.get(fid, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        text += f"‚Ä¢ {name} (ID: {fid})\n"

    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['pay'])
def pay_friend(message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    args = message.text.split()
    if len(args) != 3:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /pay ID_–¥—Ä—É–≥–∞ —Å—É–º–º–∞")
        return

    target_id, amount_str = args[1], args[2]

    if not amount_str.isdigit():
        bot.send_message(message.chat.id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    amount = int(amount_str)

    if target_id not in users:
        bot.send_message(message.chat.id, "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if target_id not in users[user_id].get("friends", []):
        bot.send_message(message.chat.id, "–¢—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑—å—è–º.")
        return

    if users[user_id]["coins"] < amount:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
        return

    users[user_id]["coins"] -= amount
    users[target_id]["coins"] += amount
    save_users(users)

    bot.send_message(message.chat.id, f"‚úÖ –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª {amount} –º–æ–Ω–µ—Ç –∏–≥—Ä–æ–∫—É {users[target_id]['name']} (ID: {target_id})")



# –ö–õ–ê–ù–û–í–´–ô –ß–ê–¢ 

@bot.message_handler(commands=['clanchat'])
def clan_chat(message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    user = users[user_id]
    clan_id = user.get("clan_id")

    if not clan_id:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ.")
        return

    text_parts = message.text.split(' ', 1)
    if len(text_parts) < 2:
        bot.send_message(message.chat.id, "–ü–∏—à–∏ —Ç–∞–∫: /clanchat –¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    chat_text = text_parts[1]
    sender_name = user["name"]

    # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —ç—Ç–æ–≥–æ –∫–ª–∞–Ω–∞
    for uid, u in users.items():
        if u.get("clan_id") == clan_id and uid != user_id:
            try:
                bot.send_message(int(uid), f"üí¨ –ö–ª–∞–Ω–æ–≤—ã–π —á–∞—Ç –æ—Ç {sender_name} (ID: {user_id}):\n{chat_text}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–Ω-—á–∞—Ç–∞ –¥–ª—è {uid}: {e}")

    bot.send_message(message.chat.id, "üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–ª–∞–Ω!")


@bot.callback_query_handler(func=lambda call: call.data.startswith("accept_") or call.data.startswith("reject_"))
def handle_friend_response(call):
    users = load_users()
    user_id = str(call.from_user.id)
    parts = call.data.split("_")
    action = parts[0]
    requester_id = parts[-1]  # –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî ID

    if user_id not in users or requester_id not in users:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
        return

    users[user_id].setdefault("pending_friends", [])
    users[user_id].setdefault("friends", [])
    users[requester_id].setdefault("friends", [])

    if requester_id not in users[user_id]["pending_friends"]:
        bot.answer_callback_query(call.id, "–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞—è–≤–∫–∏.")
        return

    if action == "accept":
        users[user_id]["pending_friends"].remove(requester_id)
        users[user_id]["friends"].append(requester_id)
        users[requester_id]["friends"].append(user_id)

        save_users(users)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üéâ –ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è –ø—Ä–∏–Ω—è—Ç–∞!"
        )
        try:
            bot.send_message(int(requester_id), f"‚úÖ {users[user_id]['name']} –¥–æ–±–∞–≤–∏–ª —Ç–µ–±—è –≤ –¥—Ä—É–∑—å—è!")
        except:
            pass

    elif action == "reject":
        users[user_id]["pending_friends"].remove(requester_id)
        save_users(users)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
        )
        try:
            bot.send_message(int(requester_id), f"‚ùå {users[user_id]['name']} –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç–≤–æ—é –∑–∞—è–≤–∫—É.")
        except:
            pass

# –î–£–≠–õ–ò 

@bot.message_handler(commands=['duel'])
def duel(message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. /start")
        return

    args = message.text.split()
    if len(args) != 2:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /duel ID_–∏–≥—Ä–æ–∫–∞")
        return

    opponent_id = args[1].lstrip("@")

    if opponent_id == user_id:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å —Å–µ–±—è.")
        return

    if opponent_id not in users:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞—è–≤–∫—É
    users[opponent_id]["duel_request"] = user_id
    save_users(users)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_duel_{user_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_duel_{user_id}")
    )

    try:
        bot.send_message(int(opponent_id), f"‚öîÔ∏è {users[user_id]['name']} –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–µ–±—è –Ω–∞ –¥—É—ç–ª—å!", reply_markup=markup)
        bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–∞ –¥—É—ç–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("accept_duel_") or call.data.startswith("reject_duel_"))
def handle_duel_response(call):
    users = load_users()
    defender_id = str(call.from_user.id)
    parts = call.data.split("_")
    action = parts[0]     # "accept" –∏–ª–∏ "reject"
    attacker_id = parts[2]

    if attacker_id not in users or defender_id not in users:
        bot.answer_callback_query(call.id, "–ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # üõ° –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∑–∞—è–≤–∫–∞
    if users[defender_id].get("duel_request") != attacker_id:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–∫–∏ –æ—Ç —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞.")
        return

    attacker = users[attacker_id]
    defender = users[defender_id]

    if action == "accept":
        # —É–¥–∞–ª–∏–º –∑–∞—è–≤–∫—É
        users[defender_id]["duel_request"] = None

        attacker_hp = attacker["hp"]
        defender_hp = defender["hp"]

        if attacker_hp <= 0 or defender_hp <= 0:
            bot.send_message(defender_id, "–£ –∫–æ–≥–æ-—Ç–æ –∏–∑ –≤–∞—Å 0 HP. –î—É—ç–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            return

        while attacker_hp > 0 and defender_hp > 0:
            defender_hp -= 15
            if defender_hp > 0:
                attacker_hp -= 15

        result_text = ""
        if attacker_hp > 0:
            attacker["hp"] = attacker_hp
            defender["hp"] = 0
            attacker["coins"] += 100
            defender["coins"] = max(0, defender["coins"] - 50)
            result_text = f"üèÜ {attacker['name']} –ø–æ–±–µ–¥–∏–ª –≤ –¥—É—ç–ª–∏!\nüí∞ +100 –º–æ–Ω–µ—Ç\nüíÄ {defender['name']} –ø—Ä–æ–∏–≥—Ä–∞–ª –∏ –ø–æ—Ç–µ—Ä—è–ª 50 –º–æ–Ω–µ—Ç."
        else:
            defender["hp"] = defender_hp
            attacker["hp"] = 0
            defender["coins"] += 100
            attacker["coins"] = max(0, attacker["coins"] - 50)
            result_text = f"üèÜ {defender['name']} –ø–æ–±–µ–¥–∏–ª –≤ –¥—É—ç–ª–∏!\nüí∞ +100 –º–æ–Ω–µ—Ç\nüíÄ {attacker['name']} –ø—Ä–æ–∏–≥—Ä–∞–ª –∏ –ø–æ—Ç–µ—Ä—è–ª 50 –º–æ–Ω–µ—Ç."

        save_users(users)

        bot.send_message(defender_id, result_text)
        bot.send_message(attacker_id, result_text)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="‚úÖ –î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        users[defender_id]["duel_request"] = None  # —É–¥–∞–ª–∏–º –∏ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        save_users(users)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="‚ùå –î—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        try:
            bot.send_message(int(attacker_id), f"‚ùå {defender['name']} –æ—Ç–∫–ª–æ–Ω–∏–ª –¥—É—ç–ª—å.")
        except:
            pass

# BONUS ONE DAY
@bot.message_handler(commands=['daily'])
def daily_bonus(message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    user = users[user_id]
    now = int(time.time())

    if now - user.get("last_daily_bonus", 0) < 86400:  # 24 —á–∞—Å–∞ = 86400 —Å–µ–∫—É–Ω–¥
        remaining = 86400 - (now - user["last_daily_bonus"])
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        bot.send_message(message.chat.id, f"üéÅ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours} —á. {minutes} –º–∏–Ω.")
        return

    coins = random.randint(50, 150)
    xp = random.randint(10, 50)

    user["coins"] += coins
    user["xp"] += xp
    user["last_daily_bonus"] = now

    save_users(users)

    bot.send_message(
        message.chat.id,
        f"üéÅ –¢—ã –ø–æ–ª—É—á–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!\nüí∞ –ú–æ–Ω–µ—Ç—ã: +{coins}\n‚ú® –û–ø—ã—Ç: +{xp}"
    )

@bot.message_handler(commands=['business'])
def business_menu(message):
    users = load_users()
    user_id = str(message.from_user.id)
    user = users.get(user_id)

    if not user:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    business = user.get("business")
    if business:
        last = user.get("last_business_income", 0)
        wait = BUSINESS_COOLDOWN - int(time.time() - last)
        msg = f"üè≠ –£ —Ç–µ–±—è –±–∏–∑–Ω–µ—Å: {business['name']}\nüí∞ –î–æ—Ö–æ–¥: {business['income']} –º–æ–Ω–µ—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n"

        if wait <= 0:
            msg += "üü¢ –î–æ—Ö–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞–ø–∏—à–∏ /collect"
        else:
            minutes = wait // 60
            seconds = wait % 60
            msg += f"‚è≥ –î–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω {seconds} —Å–µ–∫"

        msg += "\n\nüîª –ù–∞–ø–∏—à–∏ /sell_business —á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å"
        bot.send_message(message.chat.id, msg)
    else:
        text = "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã:\n"
        for b in BUSINESS_LIST:
            text += f"{b['id']}. {b['name']} ‚Äî {b['price']} –º–æ–Ω–µ—Ç, –¥–æ—Ö–æ–¥: {b['income']} / 5 –º–∏–Ω\n"
        text += "\n–ù–∞–ø–∏—à–∏: /buy_business [–Ω–æ–º–µ—Ä]"
        bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['buy_business'])
def buy_business(message):
    users = load_users()
    user_id = str(message.from_user.id)
    user = users.get(user_id)

    if not user:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    if user.get("business"):
        bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å.")
        return

    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        bot.send_message(message.chat.id, "–ü–∏—à–∏: /buy_business [–Ω–æ–º–µ—Ä]")
        return

    b_id = int(args[1])
    business = next((b for b in BUSINESS_LIST if b["id"] == b_id), None)
    if not business:
        bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ—Ç.")
        return

    if user["coins"] < business["price"]:
        bot.send_message(message.chat.id, "üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
        return

    user["coins"] -= business["price"]
    user["business"] = business
    user["last_business_income"] = time.time()
    save_users(users)
    bot.send_message(message.chat.id, f"‚úÖ –¢—ã –∫—É–ø–∏–ª –±–∏–∑–Ω–µ—Å: {business['name']}")

@bot.message_handler(commands=['collect'])
def collect_business_income(message):
    users = load_users()
    user_id = str(message.from_user.id)
    user = users.get(user_id)

    if not user or "business" not in user:
        bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞.")
        return

    last = user.get("last_business_income", 0)
    now = time.time()

    if now - last < BUSINESS_COOLDOWN:
        wait = int(BUSINESS_COOLDOWN - (now - last))
        minutes = wait // 60
        seconds = wait % 60
        bot.send_message(message.chat.id, f"‚è≥ –î–æ—Ö–æ–¥ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω {seconds} —Å–µ–∫.")
        return

    income = user["business"]["income"]
    user["coins"] += income
    user["last_business_income"] = now
    save_users(users)

    bot.send_message(message.chat.id, f"üí∞ –¢—ã –ø–æ–ª—É—á–∏–ª {income} –º–æ–Ω–µ—Ç –æ—Ç –±–∏–∑–Ω–µ—Å–∞.")


@bot.message_handler(commands=['sell_business'])
def sell_business(message):
    users = load_users()
    user_id = str(message.from_user.id)
    user = users.get(user_id)

    if not user or "business" not in user:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞.")
        return

    refund = user["business"]["price"] // 2
    user["coins"] += refund
    user.pop("business")
    user.pop("last_business_income", None)

    save_users(users)
    bot.send_message(message.chat.id, f"üßæ –¢—ã –ø—Ä–æ–¥–∞–ª –±–∏–∑–Ω–µ—Å –∏ –ø–æ–ª—É—á–∏–ª {refund} –º–æ–Ω–µ—Ç.")


bot.polling()
